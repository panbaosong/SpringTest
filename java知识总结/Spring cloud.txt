为什么父级工程下还需要创建别的父级工程？
	封装和归类。
	应为在整合项目中，有很多的服务生产者，和服务消费者，（并且他们以成对的方式存在，所以需要一个父级工程来统一管理，不会导致整个项目很混乱）
springcloud中的eureka和zookeeper的区别是什么？
	两个都是注册中心，但是两个保证的数据性不一样，
	zookeeper保证的数据的一致性，eureka保证的是数据的可用性，
	zookeeper是主从节点，而eureka则是所以都是平行节点。
zookeeper如何保证了数据的一致性？
	zookeeper无论从启动还是宕机的特点来说，都会选举leader，
	在选举过程中，整个zookeeper处于瘫痪状态（既不能发现也不能注册）
介绍一下eureka的自我保护机制
	eureka会向provider索要心跳，也就是说provide会eureka的定时发送心跳。eureka一旦无法检测心到provider心跳之后，会在等待一次，如果再次等待之后还是没有接到心跳消息，eureka就会把provider剔除掉，
	当所有的provider都宕机了，eureka会进入自我保护机制，并不会剔除节点，
如果长时间不访问eureka，eureka误以为自己宕机了会怎么样？
		会占用计算机内存，eureka一旦认为自己宕机了。说明新的服务就无法进行注册，eureka就会认为出现了脏数 eureka并不会把这些认为脏数据的provider剔除(就是把这一台provider标识为宕机状态)
		会重新开辟一个新的空间专门给这些后注册进来的数据使用
            (为了保护之前正常数据)，当eureka重启之后自我保护机制就会消失--->把两套数据合并在一起
ribbon是什么？
	ribbon是一个客户端层面的一个负载均衡。 使用restFul风格
		那客户端的负载均衡和服务器端的负载均衡有什么区别？
			应为ribbon是consumer，所以是eureka的客户端。
ribbon的负载均衡策略有哪些？
	1，随机
	2。轮询
	3.一致性哈希
	4.哈希
	5.加权
feign是什么？
	是微服务里面的声明式调用
feign和ribbon都是负载均衡，feign和ribbon有什么区别？
	ribbon是只做负载均衡，但是feign可以实现服务之间的调用
	feign中其实负载均衡是由ribbon实现的，也就是说feign集成的有ribbon
hystrix的四大核心
	1。断容
		当服务器调用的时候，项目出现了严重的异常，去做的补救措施，
		可以返回给客户端一个能接受的结果。
	2.服务降级
		当核心服务器的压力过大的时候，为了指成整个项目业务正常运行，把无关紧要的服务器关掉，等峰值过去之后在恢复所以的服务器，这种模式就叫做服务的降级，
	3。服务的限流
		当服务的压力过大的时候，也就是说负载比较多的时候，就不能再继续支撑整个服务器的运行了。
			就是说负载达到所设置的值之后，其余的负载全部走熔断
	4.服务的隔离
		线程池隔离：在该模式下，用户请求会被提交到各自的线程池中执行，把执行每个下游服务的线程分离，从而达到资源隔离的作用。当线程池来不及处理并且请求队列塞满时，新进来的请求将快速失败，可以避免依赖问题扩散
		信号量隔离：就是做一个计数器，当计数器达到所设置的值之后，其余的请求就开始进行排队，
zuul的常用功能有那些？
	请求转发：就是把客户端的请求转发到具体的provider上

	过滤请求：过滤掉客户端的非法请求和而已访问攻击，（只有匹配上设置的规则才可以正常的访问我的项目，并且路由器会把真正的访问地址给隐藏）

	也可以用做过滤器：就是看看是不是登录用户，如果没有登录则直接跳转到登录页面。
zipkin	
	 服务追踪：服务什么时候会被调用，服务调用过程是怎么样，调用了哪些方法--->服务追踪的目的是为了方便于服务的监控--->也为了更好实现自动日志采集
springcloud的config 分布式配置中心是什么？
		管理配置文件的项目
		当微服务越来越多的时候，就意味着配置文件越来越多，这些配置而且会大批量出现重复现象，可以使用封装形式进行解决
分布式配置中心都有那三种形式的配置文件
		 application-dev.properties:对应的开发阶段所需要的配置文件
		  application-test.properties:对应的测试阶段所需要的配置文件
		  application-pro.properties:对应的是上线阶段所需要的配置文件
 在config的client端其实可以配置几个配置文件
 		两个
 			 bootstrap
             application
         这两个配置文件哪一个先加载？加载顺序是什么？
         	 bootstrap > application
         	  因为boostrap.properties其实项目运行的时候加载不了这个文件，这个文件作用就是从远程把数据加载回来
                当数据加载回来的时候client会默认的生成出来一个文件(application.properties)-->如果有这个文件，就把数据追加进去(如果发现数据最终重复了，则直接覆盖)	     
ribbn的负载均衡有几种规则
	有八种， 常用的有轮询 加权轮询，随机
服务的扇出
		总的来说像是分工合作，各个模块没有关系，各自调用各自的服务，得到返回值，画个模型图的话就是像擅自的形式
雪崩效应
        在正常的服务扇出的情况下，突然有一条线断了，其他的所有线路都在等待这一条线(直到连接超时)，在还没有出现连接超时的时候突然来了10万的并发
        最终全部挤压在断的那一条线路上，该线路直接宕机，直接会导致A宕机，A一旦宕机整个集群都处于瘫痪状态，这种叫做服务的雪崩效应			                