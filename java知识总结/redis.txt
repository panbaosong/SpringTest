什么是redis？----------------》（重点）
	redis称之为缓存
	redis是基于纯内存亦可持久化的日志类型，key——value型，nosql数据库，
redis的特点是什么？----------------》（重点）
	性能高，读写速度快，支持的数据结构丰富，支持的语言丰富，支持数据持久化，支持主从复制。
redis的持久化策略是什么？----------------》（重点）
	redis有两种相对的游戏备份方法，RDB和AOF，
		1.RDB是在某个时间点讲内存中的所有数据以快照形式保存到磁盘上，在数据恢复时，可以恢复备份时间以前的所有数据，
		但是无法恢复奔放时间点后的数据，
		2.AOF是以协议文本方式，讲所有对数据库进行过的写入命令记录到AOF文件，以此达到记录数据库状态的目的，
		优点时基本可以实现数据无丢失，（缓存数据有可能丢失）缺点则是随着数据量持续增加，AOF文件也会越来越大。
	解决办法：在保证数据安全的情况下，尽量避免因备份数据消耗过多的
	redis资源，采用如下备份策略：
		主实例：不采用任何备份机制.
		从机端:	采用AOF（严格数据要求的时候可同时开启RDB），每天将AOF文件备份至备份服务器。
		为了最大限度减少主实例的资源干扰，将备份相关全部移至从机端完成，同时这样也有缺点，当主实例挂掉后，
		应用服务切换至从机端，此时的从机段的负载将会很大，
redis支持的数据类型都有什么？都有什么特点？----------------》（重点）
	String（字符串）：最常用的 ，最大容量（512MB）
	hash（哈希）：有hashmap（线程不安全），有hashtable（线程安全）
	list（列表）：有序，数据可重复
	set（集合）：无序，数据不可重复
	zset（有序集合）有序，数据不可重复
Redis与其他key-value存储有什么不同？
	redis有着更为复杂的数据结构并且提供他们的原子性操作，这是一个不同于其他数据库的进化路径。
	redis的数据类型都是基于基本的数据结构的同时对程序员透明，无需要进行额外的抽象。
	redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时权衡内存，
	应为数据量不能大于硬件内存，在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的
	数据结构，在内存中操作起来非常简单，这样redis可以做很多内部复杂性很强的事情，同时，在磁盘
	格式方面他们是紧凑的以追加的方式产生的，应为他们并不需要进行随机访问。
redis的应用场景有哪些？----------------》（重点）
	1.热点数据缓存，
		可以将经常用到的不经常改动的数据进行数据缓存，我们可以设置过期时间然后在进行
		缓存更新操作，这个功能最为常见，
	2限时业务的运用，
		redis中可以使用expire命令设置一个键的生存时间，到时间后redis会删除它。
		利用这一特性可以运用 在限时的优惠活动信息、手机验证码等业务场景。	
	3计数器相关的问题
		什么是计数器？如电商网站的浏览量，视频网站的播放数。为了保证数据实时效，
		每次浏览都带给+1，并发量搞时如果每次都请求数据库无疑时一种挑战和压力，
		redis提供了incr命令来实现计数器功能，内存操作，性能好，适用于计数场景
	4排行榜相关的问题
		关系型数据库在排行榜方面查询速度普遍偏慢，所以可以借助redis的SortedSet
		进行热点数据的排序。
	5分布式锁
		分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID，减库存，秒杀等场景
		，并发量不大的场景可以使用数据库的悲观锁，乐观锁来实现，但在并发量高的场合中，
		利用数据库所来控制资源的并发量不是太理想，大大影响数据库的型能，可以利用redis
		setnx功能来编写分布式的锁，如果设置返回值1说明获取锁成功，否则获取锁失败，。
	6延时操作
		比如在订单生成后我们占用了库存，10分钟后去检验用户是否真正的购买，如果没有
		购买将该单设置无效，同时还原库存，
	7分页，模糊搜索
		？
	8点赞，好友等相互关系的存储
		点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常
		来说比较大，而 且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、
		集合等数据结构能很方便的 的实现这些功能	
	9队列
CAP定理是什么
	一致性（CP）： 所有节点在同一时间具有相同的数据
	可用性（AP）：保证每个请求不管成功或者失败都有响应
	分割容忍（CA）：系统中任意信息的丢失和失败不影响系统运行
		

什么是缓存？
	将磁盘中的数据存到内存中，加快查询的速度，存到内存中的数据（缓存）
RDB和AOF模式的有点和缺点是什么？
	RDB快照形式：效率高，但安全性低
	AOF文本形式：效率慢，安全性高	
redis主从复制的作用
	1.数据沉余：主次复制实现了数据的热备份，是持久化之外的一种数据沉余方式
	2.故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的沉余
	3.负载均衡，在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载，尤其时在写少读多的场景下，通过多个从节点分担读负载，可以大大提高redis服务器的并发量。
	4.读写分离：可以用域实现读写分离，主库写，从库读，读写分离不仅可以提高服务器的负载均衡能力，同时可根据需求的变化，改变从库的数量。
	5.高可以基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，英雌说是主从复制时redis高可用的基础。
redis的选举机制
	当从节点发现自己的主节点为宕机状态时，便尝试进行Failover，以便成为新的主节点，由于挂掉的主节点可能会有多个从节点，从而存在多个从节点竞争成为主节点的过程，
	1，从节点发现自己的主节点挂掉了。
	2，将自己记录的集群currentEpoch加1，并开始广播信息。
	3.其他节点收到该信息，只有主节点响应，判断请求这个的合法性。
	并发送应答信号，对每一个epoch只发送一次ack。
	4，尝试failover的从节点收集应答信号。
	5.超过半数后变成新的主节点
	6，广播Pong通知其他的集群节点，
	从节点并不是在主节点一进入FAll状态就立马尝试发起选举，
	而是由一定的延迟，一定的延迟确保我们等待FAll状态在集群中传播，
	从节点如果立即尝试选举，其他主节点或许还没有意识到FAll状态。可能会拒绝投票；
redis主从的缺点是什么
	1.一旦主宕机，需要手动去配置从库末主库。
	2，容量有限。
为什么要有哨兵机制？
	1哨兵机制出现时为了解决主从复制的缺点。
	2.哨兵机制实现了高可用		
	原理：当主节点出现故障时，由Redis Sentinel自动完成故障发现和转移，并通知应用方，实现高 可用性
redis为什么这么快？----------------》（重点）
	1.纯内存操作
	2.避免了频繁的上下文切换
	3.采用了IO多路复用机制
缓存雪崩----------------》（重点）
	某一时刻。缓存大批量失效，大量的请求全部落到了数据库头上，导致数据库宕机，数据丢失，损失。
	解决办法：
	事前：尽量保证整个redis集群的高可用性。发现机器宕机尽快补上。选择合适的内存淘汰策略。
	事中：本地ehcache缓存，+hystrix限流&降级，避免Mysql崩掉
	事后：利用redis持久化机制保存的数据尽快恢复缓存
缓存穿透	----------------》（重点）
	一般是黑客故意去请求缓存中不存在的数据，导致所有的请求到落到了数据库上，造成数据库短时间内承受大量请求而崩掉
	解决办法：
	有很多种方法可以有效的解决，最常见的是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力，另外页有一个更为简单粗暴的方法，如果一个查询发挥数据为空，我们仍然吧这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。
redis的内存淘汰机制（如何保证redis中的数据都是热点数据？）----------------》（重点）
	redis提供6中数据淘汰策略：
	1.volatile——lru：从以设置过期时间的数据集中挑选最近最少使用的数据淘汰。
	2.volatile-ttl：从一设置过期时间的数据集中挑选将要过期的数据淘汰。
	3.volatile-random：从已设置过期时间的数据集中任意选择数据淘汰
	4.allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最 常用的）
	5. allkeys-random：从数据集中任意选择数据淘汰
	6. no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这 个应该没人使用吧
redis 基本工作原理
	1、redis数据备份原理，RDB和AOF。
	RDB：redis基于当前自身的所有数据所生成的数据快照，纯粹的数据，若redis从rdb启动，可直接加载使用。
	AOF：类似redis日志文件，aof文件内部是redis收到的写命令，若redis从aof启动，需要先读aof文件，然后执行里面的命令，生产数据。
	当触发生成rdb时，redis会开启后台线程，生成一份rdb，触发条件可以设置，类似隔多长时间或有多少数据改动时，生成rdb。
	aof类似redis日志，可控制写入的频率，如每秒写入，当开启aof时（默认关闭），redis内部维护一个aof文件，实时将redis收到的写命令写入aof中。
	aof由于不断地写入，会变得越来越大，当aof大小从0增大到设定的大小时，会触发aof的第一次rewrite操作，redis会将基于当前的数据生成新的aof文件，
	在此期间，如果redis收到新的写命令，redis会将写命令暂时保存在内存，等新的aof完成后，再将内存中的命令追加到新aof中，
	当新aof完全完成后（假设大小为n），redis会删除原aof文件。当新的aof文件不断扩大到2n时（默认2倍），会触发rewrite操作。
为什么要用 redis/为什么要用缓存
	主要从高性能和高并发的这两点来看到这个问题
redis除了set get 还有那些操作？
	失效操作，List里边的lrange操作做分别特功能，		