Zookeeper是什么？
	是分布式的，开源的，分布式服务的协调管理的一个框架。是注册中心。协调各个分布式服务一块干活。
	Zookeeper=文件系统+通知机制
		文件系统：保存各个微服务的注册信息。最大数据上限为1M
Zookeeper实现了什么设计模式？
	实现了观察者模式
		：监听节点信息，一旦任何节点出现改变，则通知各各节点进行同步。
Zookeeper的节点类型都有那些？
	1.持久化节点：一旦创建，一直存在。除非手动删除。
	2.临时节点：客户端一zk断开连接后，临时节点不复存在。
	3.持久化顺序节点：自动根据创建事件进行编号
	4.临时顺序节点：临时节点进行编号。
Zookeeper的应用场景有那些？（重点）
	1.统一命名服务：(注册中心)
	2.配置管理
	3.集群节点状态管理。
	4.服务上下线管理
		微服务
	5.分布式锁
	6.分布式队列
Zookeeper都有什么角色？
	1.leader：领导者：事务处理，写操作的唯一的调度和处理者，集群内部各服务的调度者
	2.follower跟随者：处理客户端的非事务请求，读操作。如果是事务请求则转发给Leader进行处理，参与选择（投票）
	3.Observer:观察者：3.3版本以后增加的一个角色，不参与选举。仅仅是扩展功能。其他功能跟Follower是一致的。
Zookeeper的处理流程是什么？
	1.客户端发起写请求--Foolower：跟随者
	2.跟随者将请求转发给---Leader：领导者
	3.领导者执行数据写入，通知各各跟随着进行数据同步，领导者发起事务的投票：发消息通知各各跟随着进行数据同步。如果半数以上的跟随着执行完数据同步，认为以及完成事务的请求。
	4.领导者将相应返回给跟随着。
	5.跟随着将结果返回给客户端
Zookeeper的选举原理
	Zookeeper采用的是半数选举机制，
		当第一台服务器启动的时候会给自己的投票，这个时候它自己的票数是1，然后当第二台服务器启动的时候也给自己投一票，然后第一天服务器发现自己的Zxid没有第二台大，就给第二台服务器也投上一票。
		第三天服务器启动的时候也是同样的给自己投一票，然后相对比较之后，其他两台服务器也给自己投一票。这个时候票数已经超过了半数以上，第三天服务器则成为了Leader。
		剩下两台启动的时候，已经选举出来了领导者，已经无法在进行选举了
	Leader宕机后怎么选举？
		中途leader宕机后，会进行新的选举，比较（Myid，Zxid），如果Zxid大，获得选票。其他过程一样。								
Zookeeper的监听流程是什么？
	1.启动Main线程
	2.创建Zookeeper客户端，启动线程：connect线程，listener线程
	3.通过connect注册监听事件到zk服务器
	4.监听事件对应的数据发生了变动，通知监听的线程进行处理。
	5.调用监听线程的：process方法进行处理。
分布式应用程序可以基于Zookeeper实现什么功能？
	数据发布/订阅，负载均衡，命名服务，分布式协调，/通知，集群管理，
	master选举，分布式锁和分布式队列等功能。	
