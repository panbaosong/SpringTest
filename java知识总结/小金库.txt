
	1.谈谈你对Spring的理解？
		Spring是现在Java开发中最主流的框架之一，是一个企业级的开源开发平台，Spring包含了Ioc和Aop的容器框架。

		什么是Ioc?
		Invotion Of Controller 
		控制反转：
				Ioc 是一种思想，提出的大体观点是，通过第三方实现具有依赖关系对象直接的解耦。
				可以举一个例子，之前是怎么创建对象，现在通过Spring是如何创建对象的。
				Spring容器使用了工厂模式为我们创建了我们所需要的象，不需要我们自己创建了。

		什么是Aop?
		Aspect Oriented Programming
		面向切面编程：
				AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。

				AOP技术恰恰相反，它利用一种称为"横切"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为"Aspect"，即切面。所谓"切面"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。

				使用"横切"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。

	2.Spring中所使用的设计模式？
		工厂模式：Ioc的实现创建对象。 BeanFactory
		单例模式：Bean的默认作用域，Singleton.
		Template：模板模式，解决代码重复的问题。JdbcTemplate

	3.Spring常用注解？
	@Autowired 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。
	@Autowired @Qualifier("personDaoBean") 存在多个实例配合使用
	@Scope注解 用于指定bean的作用域
	@Service用于标注业务层组件
	@Controller用于标注控制层组件（如struts中的action）

	4.bean的生命周期？
		1.首先容器启动后，会对scope为singleton且非懒加载的bean进行实例化，

		2.按照Bean定义信息配置信息，注入所有的属性，

		3.如果Bean实现了BeanNameAware接口，会回调该接口的setBeanName()方法，传入该Bean的id，此时该Bean就获得了自己在配置文件中的id，

		4.如果Bean实现了BeanFactoryAware接口,会回调该接口的setBeanFactory()方法，传入该Bean的BeanFactory，这样该Bean就获得了自己所在的BeanFactory，

		5.如果Bean实现了ApplicationContextAware接口,会回调该接口的setApplicationContext()方法，传入该Bean的ApplicationContext，这样该Bean就获得了自己所在的ApplicationContext，

		6.如果有Bean实现了BeanPostProcessor接口，则会回调该接口的postProcessBeforeInitialzation()方法，

		7.如果Bean实现了InitializingBean接口，则会回调该接口的afterPropertiesSet()方法，

		8.如果Bean配置了init-method方法，则会执行init-method配置的方法，

		9.如果有Bean实现了BeanPostProcessor接口，则会回调该接口的postProcessAfterInitialization()方法，

		10.经过流程9之后，就可以正式使用该Bean了,对于scope为singleton的Bean,Spring的ioc容器中会缓存一份该bean的实例，而对于scope为prototype的Bean,每次被调用都会new一个新的对象，期生命周期就交给调用方管理了，不再是Spring容器进行管理了

		11.容器关闭后，如果Bean实现了DisposableBean接口，则会回调该接口的destroy()方法，

		12.如果Bean配置了destroy-method方法，则会执行destroy-method配置的方法，至此，整个Bean的生命周期结束

	5.Spring的架构？
		七大模块
			Spring-core		:核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。
			Spring-aop		:将Aop集成到Spring中
			Spring-dao		:spring提供的对jdbc的一个封装，JDBCTemplate
			Spring-web 	 	:建立在Spring-context模块之上，为基于web的应用程序提供了上下文。	
			Spring-webMvc	:MVC框架是一个全功能的构建Web应用程序的MVC实现。
			Spring-context	:Spring的上下问配置文件。																						
			Spring-orm		:spring针对常用的主流orm框架提供的一个模块。

	6.Spring的作用？
		帮助我们根据配置文件，创建及组装对象之间的依赖关系。
		可以使用AOP帮助我们无耦合的实现日志操作，性能记录等。
		可以帮我们管理数据库事务
		可以与第三方数据库框架无缝集成

	7.Spirng事务？
		事务的四个特性：ACID
		A：原子性（Atomicity）	事务最基本的操作单元，要么全部成功，要么全部失败，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样。
		C：一致性（Consistency） 事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态
		I：隔离性（Isolation）指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。
		D：持久性（Durability）
　　　　指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。	
	
	8.Spring-BeanFactory常用的实现类？
		DefaultListableBeanFactory
		XmlBeanFactory
		ApplicationContext

	9.SpringJdbc\SpringDao\SpringOrm的区别？

		Spring-DAO 并非 Spring 的一个模块，它实际上是指示你写 DAO 操作、写好 DAO 操作的一些规范。因此，对于访问你的数据它既没有提供接口也没有提供实现更没有提供模板

		Spring-JDBC 提供了 Jdbc 模板类，它移除了连接代码以帮你专注于 SQL 查询和相关参数。Spring-JDBC 还
		提供了一个 JdbcDaoSupport，这样你可以对你的 DAO 进行扩展开发。它主要定义了两个属性：一个 DataSource
		和一个 JdbcTemplate，它们都可以用来实现 DAO 方法。

		Spring-ORM 是一个囊括了很多持久层技术(JPA，JDO，Hibernate，iBatis)的总括模块。对于这些技术中的每一
		个，Spring 都提供了集成类，这样每一种技术都能够在遵循 Spring 的配置原则下进行使用，并平稳地和 Spring 事
		务管理进行集成。

	10.简单介绍一下 Spring WEB 模块？
		Spring 的 WEB 模块是构建在 application context 模块基础之上，提供一个适合 web 应用的上下文。这个模块
 		感恩于心，回报于行。 也包括支持多种面向 web 的任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。

 	11.Spring配置文件的作用？
 		Spring 配置文件是个 XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。

 	12.SpringIoc?
 		参考之前

 	13.Spring-ApplicationContext的实现类？
 		ClassPathXmlApplicationContext
 			可以加载类路径下的配置文件，要求配置文件必须在类路径下。不在的话，加载不了。

 		SystemtFileXmlApplicatonContext
 			可以加载磁盘任意路径下的配置文件（必须有访问权限）

 		AnnotationXmlApplicationContext
 			用于读取注解创建容器

 	14.Spring-BeanFactory 和 Spring-ApplicationContext的区别？
 		BeanFactory是一个顶级接口，不过现在已经不使用了。		采用按需加载
 		ApplicationContext是BeanFactory的一个子接口，是在BeanFactory上面做的改进，采用立即加载


 	15.什么是SpringDi?
 		DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。
 		而不是对象自己去寻找其所依赖的对象。

 	16.依赖注入有几种方式？
 		基于Setter方法
 		基于构造注入
 		基于注解注入。

 	17.什么是SpringBeans?
 		在Spring中，将一切对象，都当作一个bean，来进行管理，包括其创建，依赖关系，生命周期等。

 	18.定义一个Spring-Bean需要注意什么？
 		一个Spring-Bean的定义，需要注意容器必知的所有元数据，还有其依赖关系，作用域等。

 	19.你怎样定义bean的作用域?
 		xml配置文件中通过scope属性配置
 		注解通过@Scope配置

 	20.Spring-Bean的作用域？
 		Spring 框架支持以下五种 bean 的作用域：
		singleton : bean 在每个 Spring ioc 容器中只有一个实例。
		prototype：一个 bean 的定义可以有多个实例。
		request：每次 http 请求都会创建一个 bean，该作用域仅在基于 web 的 Spring ApplicationContext 情形下有
		效。
		session ： 在 一 个 HTTP Session 中 ， 一个 bean 定 义 对 应 一 个 实 例。 该 作 用 域 仅 在 基 于 web 的
		Spring ApplicationContext 情形下有效。
		global-session：在一个全局的 HTTP Session 中，一个 bean 定义对应一个实例。该作用域仅在基于 web 的
		Spring ApplicationContext 情形下有效。
		缺省的 Spring bean 的作用域是 Singleton。

	21.一个bean的线程是否安全？
		不安全

	22.什么是内部bean?
		一个bean 在另一个bean内部被引用。

	23.spring中 如何注入一个list？
		Spring 提供以下几种集合的配置元素：
			<list>类型用于注入一列值，允许有相同的值。
			<set> 类型用于注入一组值，不允许有相同的值。
			<map> 类型用于注入一组键值对，键和值都可以为任意类型。
			<props>类型用于注入一组键值对，键和值都只能为 String 类型。

	24.什么是spirng的自动装配？
		无须在 Spring 配置文件中描述 javaBean 之间的依赖关系（如配置<property>、<constructor-arg>）。IOC 容
		器会自动建立 javabean 之间的关联关系。

	25.spring支持哪几种自动装配？
		no		默认的方式是不进行自动装配，通过显式设置 ref 属性来进行装配。
		byType	通过参数类型自动装配，
		byName	通过参数名自动装配，
		constructor 	这个方式类似于 byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。
		autodetect	首先尝试使用 constructor 来自动装配，如果无法工作，则使用 byType 方式。

	26.什么是基于Java的Spring注解配置？
		基于 Java 的配置，允许你在少量的 Java 注解的帮助下，进行你的大部分 Spring 配置而非通过 XML 文件。
		以@Configuration 注解为例，它用来标记类可以当做一个 bean 的定义，被 Spring IOC 容器使用。另一个例子是
		@Bean 注解，它表示此方法将要返回一个对象，作为一个 bean 注册进 Spring 应用上下文。

	27.什么是基于注解的容器配置？
		相对于 XML 文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。开发者通过在相应的类，
		方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用 xml 表述 bean 的装配关系。

	28.如何开启注解运行？
		在spring的配置文件中，配置<context:Annotation:config/> 开启注解

	29.Spring 框架中如何更有效地使用 JDBC?
		使用 SpringJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写 statements 和 queries 从
		数据存取数据，JDBC 也可以在 Spring 框架提供的模板类的帮助下更有效地被使用，这个模板叫 JdbcTemplate 。
		JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的
		数据库操作语句，提供自定义的数据错误处理。

		可以解释一下 datasource 和 jdbcTemplate

	30.Spring支持的Orm框架有那些？
		Spring 支持以下 ORM：
		Hibernate、iBatis、JPA (Java Persistence API)、TopLink、JDO (Java Data Objects)、OJB

	31.什么是Aop?
		略过

	32.什么是切入点？
		切入点（Pointcut）
　　　　		切入点（Pointcut）
　　　　上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有几十个连接点了对把，但是你并不想在所有方法附近都使用通知
	  （使用叫织入，以后再说），你只想让其中的几个，在调用这几个方法之前，之后或者抛出异常时干点什么，那么就用切点来定义这几个方法，让切点来筛选连接点，选 中那几个你想要的方法。

	33.什么是连接点？	
	  	连接点是一个比较空泛的概念，就是定义了哪一些地方是可以切入的，也就是所有允许你通知的地方。
	    连接点（JoinPoint）
	    	　这个更好解释了，就是spring允许你使用通知的地方，那可真就多了，基本每个方法的前，后（两者都有也行），或抛出异常时都可以是连接点，spring只支持方法连接点.其他如aspectJ还可以让你在构造器或属性注入时都行，不过那不是咱关注的，只要记住，和方法有关的前前后后（抛出异常），都是连接点。

	34. Spring 的通知是什么？有哪几种类型？
	    通知是个在方法执行前或执行后要做的动作

	    分为五类执行方式：
	    	前置通知（Before）：在目标方法被调用之前调用通知功能；

	        	后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；

	    	返回通知（After-returning）：在目标方法成功执行之后调用通知；

	      	异常通知（After-throwing）：在目标方法抛出异常后调用通知；

	      	环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。

			通知就定义，需要做什么，以及在某个连接点的什么时候做。 上面的切点定义了在哪里做。

	35.什么是目标对象（Target）？
		引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。

	36.什么是代理？
		一个类被AOP织入通知后，就产出了一个结果类，它是融合了原类和通知逻辑的代理类。根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能就是原类的子类，所以我们可以采用调用原类相同的方式调用代理类。

	37.织入（Weaving）
		 织入是将通知添加对目标类具体连接点上的过程。AOP像一台织布机，将目标类、通知或引介通过AOP这台织布机天衣无缝地编织到一起。根据不同的实现技术，AOP有三种织入的方式：

	    a、编译期织入，这要求使用特殊的Java编译器。

	    b、类装载期织入，这要求使用特殊的类装载器。

	    c、动态代理织入，在运行期为目标类添加通知生成子类的方式。

	   
	BeginTime
	2020-04-04 11:30

	41.XmlBeanFactory作用？
		最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。

	42.Bean生命周期中的重要方法？
		有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。
		The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。


	43.bean的装配？	
		装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。

	44.bean自动装配的缺点？
		自动装配的局限性是：


			重写： 你仍需用 < constructor-arg >和 < property > 配置来定义依赖，意味着总要重写自动装配。


			基本数据类型： 你不能自动装配简单的属性，如基本数据类型，String字符串，和类。


			模糊特性： 自动装配不如显式装配精确，如果有可能，建议使用显式装配。


	45.@Required的作用？
		@Required注解适用于bean属性的setter方法，并表示受影响的bean属性必须在XML配置文件在配置时进行填充。否则，容器会抛出一个BeanInitializationException异常。

		public class Student(){

			@Required
		    public void setAge(Integer age){
		        this.age = age;
		    }

		}

		xml:		此时 age 并没有赋值
			 <bean id="student" class="com.jsoft.testspring.testannotationrequired.Student">
		        <property name="name" value="Jim"/>
		   </bean>

		而此时的运行结果是出现了错误的，因为age的setter方法没有在bean中注入，而age的setter方法标记了@Required，也就是必须要输入，
		抛出的异常为：BeanInitializationException。



	46.spring 事务的优点？

		它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。


		它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如


		它支持声明式事务管理。


		它和Spring各种数据访问抽象层很好得集成。


	47.你推荐使用哪种spirng事务？

		大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。

	48.什么是引入？

		引入允许我们在已存在的类中增加新的方法和属性。

	49.!有几种目标代理的分类？

		BeanNameAutoProxyCreator

		DefaultAdvisorAutoProxyCreator

		Metadata autoproxying

	50.!什么是织入，织入的应用点？

		织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。

		织入可以在编译时，加载时，或运行时完成。

	51.如何利用xml配置切面？

		在这种情况下，切面由常规类以及基于XML的配置实现。

	52.如何利用@Aspect注解配置切面？

		在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。

	53.什么是spring的mvc？

		Spring 配备构建Web 应用的全功能MVC框架。Spring可以很便捷地和其他MVC框架集成，如Struts，Spring 的MVC框架用控制反转把业务对象和控制逻辑清晰地隔离。它也允许以声明的方式把请求参数和业务对象绑定。

	54.DispatcherServlet?

		Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。

	55.!webApplicationContext？

		WebApplicationContext 继承了ApplicationContext 并增加了一些WEB应用必备的特有功能，它不同于一般的ApplicationContext ，因为它能处理主题，并找到被关联的servlet。

	56.!!!springMvc的控制器？

		控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。

	57.@Controller？

		该注解表明该类扮演控制器a的角色，Spring不需要你继承任何其他控制器基类或引用Servlet API。

	58.@RequestMapping？

		该注解是用来映射一个URL到一个类或一个特定的方处理法上。

	59.什么是SpringBoot?

		多年来，随着新功能的增加，spring 变得越来越复杂。访问spring官网页面，我们就会看到可以在我们的应用程序中使用的所有 Spring 项目的不同功能。如果必须启动一个新的 Spring 项目，我们必须添加构建路径或添加 Maven 依赖关系，配置应用程序服务器，添加 spring 配置。因此，开始一个新的 spring 项目需要很多努力，因为我们现在必须从头开始做所有事情。
		Spring Boot 是解决这个问题的方法。Spring Boot 已经建立在现有 spring 框架之上。使用 spring 启动，我们避免了之前我们必须做的所有样板代码和配置。因此，Spring Boot 可以帮助我们以最少的工作量，更加健壮地使用现有的 Spring功能。


	60.SpringBoot的优点？

		1、减少开发，测试时间和努力。
		2、使用 JavaConfig 有助于避免使用 XML。
		3、避免大量的 Maven 导入和各种版本冲突。
		4、提供意见发展方法。
		5、通过提供默认值快速开始开发。
		6、没有单独的 Web 服务器需要。这意味着你不再需要启动 Tomcat，Glassfish或其他任何东西。
		7、需要更少的配置 因为没有 web.xml 文件。只需添加用@ Configuration 注释的类，然后添加用@Bean 注释的方法，Spring 将自动加载对象并像以前一样对其进行管理。您甚至可以将@Autowired 添加到 bean 方法中，以使 Spring 自动装入需要的依赖关系中。
		8、基于环境的配置 使用这些属性，您可以将您正在使用的环境传递到应用程序：-Dspring.profiles.active = {enviornment}。在加载主应用程序属性文件后，Spring 将在（application{environment} .properties）中加载后续的应用程序属性文件。


	61.JavaConfig?

		Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring IoC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于：
		（1）面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。
		（2）减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。
		（3）类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。


	62.在SpringBoot中如何实现，改变应用程序，但是不需要重启项目?

		热部署
		这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。


	63.!如何在SpringBoot中检测器是什么？

		Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为 HTTP URL 访问的REST 端点来检查状态。

	64.!如何在 Spring Boot 中禁用 Actuator 端点安全性？

		默认情况下，所有敏感的 HTTP 端点都是安全的，只有具有 ACTUATOR 角色的用户才能访问它们。安全性是使用标准的 HttpServletRequest.isUserInRole 方法实施的。 我们可以使用来禁用安全性。只有在执行机构端点在防火墙后访问时，才建议禁用安全性。


	65.!如何在自定义端口上运行 Spring Boot 应用程序？

		为了在自定义端口上运行 Spring Boot 应用程序，您可以在application.properties 中指定端口。server.port = 8090

	66.什么是YAML？

		YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。

	67.如何保证SpringBoot应用安全？

		为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter 并覆盖其方法。

	68.!如何在SpringBoot中实现分页和排序？

		使用 Spring Boot 实现分页非常简单。使用 Spring Data-JPA 可以实现将可分页的传递给存储库方法。

	69.!什么是SpringBoot的Profiles？

		Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。可以分别针对不同的开发时期。

	70.!!什么是SpingBoot的batch?

		Spring Boot Batch 提供可重用的函数，这些函数在处理大量记录时非常重要，包括日志/跟踪，事务管理，作业处理统计信息，作业重新启动，跳过和资源管理。它还提供了更先进的技术服务和功能，通过优化和分区技术，可以实现极高批量和高性能批处理作业。简单以及复杂的大批量批处理作业可以高度可扩展的方式利用框架处理重要大量的信息。


	71.什么是mybatis?
		Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。


	72.mybatis的优点？
		1、基于 SQL 语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL 写在 XML 里，解除 sql 与程序代码的耦合，便于统一管理；提供 XML标签，支持编写动态 SQL 语句，并可重用。
		2、与 JDBC 相比，减少了 50%以上的代码量，消除了 JDBC 大量冗余的代码，不需要手动开关连接； 
		3、很好的与各种数据库兼容（因为 MyBatis 使用 JDBC 来连接数据库，所以只要JDBC 支持的数据库 MyBatis 都支持）。 
		4、能够与 Spring 很好的集成；
		5、提供映射标签，支持对象与数据库的 ORM 字段关系映射；提供对象关系映射标签，支持对象关系组件维护。 

	73.MyBatis 框架的缺点?
		1、SQL 语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL 语句的功底有一定要求。 
		2、SQL 语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。 

	74.MyBatis 框架适用场合?
		1、MyBatis 专注于 SQL 本身，是一个足够灵活的 DAO 层解决方案。
		2、对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis 将是不错的选择

	75.!MyBatis 与 Hibernate 有哪些不同？
		1、Mybatis 和 hibernate 不同，它不完全是一个 ORM 框架，因为 MyBatis 需要程序员自己编写 Sql 语句。
		2、Mybatis 直接编写原生态 sql，可以严格控制 sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是 mybatis 无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套 sql 映射文件，工作量大。
		3、Hibernate 对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用 hibernate 开发可以节省很多代码，提高效率。 

	76.#{}和${}的区别是什么？ 
		#{}是预编译处理，${}是字符串替换。Mybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的set 方法来赋值； 
		Mybatis 在处理${}时，就是把${}替换成变量的值。使用#{}可以有效的防止 SQL 注入，提高系统安全性。

	77.当实体类中的属性名和表中的字段名不一样 ，怎么办 ？ 
		第 1 种： 通过在查询的 sql 语句中定义字段名的别名，让字段名的别名和实体类的属性名一致
			<select id=”selectorder” parametertype=”int” resultetype=”
			me.gacl.domain.order”>
			select order_id id, order_no orderno ,order_price price form
			orders where order_id=#{id};
			</select> 

		第 2 种： 通过<resultMap>来映射字段名和实体类属性名的一一对应的关系。
			<select id="getOrder" parameterType="int"
				resultMap="orderresultmap">
				select * from orders where order_id=#{id}
				</select>
				<resultMap type=”me.gacl.domain.order” id=”orderresultmap”>
				<!–用 id 属性来映射主键字段–>
				<id property=”id” column=”order_id”>
				<!–用 result 属性来映射非主键字段，property 为实体类属性名，column
				为数据表中的属性–>
				<result property = “orderno” column =”order_no”/>
				<result property=”price” column=”order_price” />
			</reslutMap>

	78.!模糊查询 like 语句该怎么写? -- 避免sql注入方式
		第 1 种：在 Java 代码中添加 sql 通配符。
		string wildcardname = “%smi%”;
			list<name> names = mapper.selectlike(wildcardname);<select id=”selectlike”>
			select * from foo where bar like #{value}
		</select>

		第 2 种：在 sql 语句中拼接通配符，会引起 sql 注入
			string wildcardname = “smi”;
				list<name> names = mapper.selectlike(wildcardname);
				<select id=”selectlike”>
				select * from foo where bar like "%"#{value}"%"
			</select>

	79.!通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，请问，这个 Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？
		Dao 接口即 Mapper 接口。接口的全限名，就是映射文件中的 namespace 的值；
		接口的方法名，就是映射文件中 Mapper 的 Statement 的 id 值；
		接口方法内的参数，就是传递给 sql 的参数。
		Mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为 key 值，可唯一定位一个 MapperStatement。在 Mybatis 中，每一个<select>、<insert>、<update>、<delete>标签，都会被解析为一个MapperStatement 对象。 
		举例：com.mybatis3.mappers^tudentDao.findStudentByld,可以唯
		—找到 namespace 为 co m.mybatis3. map pe rs.Stud ent Dao 下面 id 为
		findStudentByld MapperStatement.Mapper接口里的方法，是不能重载的，因为是使用全限名+方法名的保存和寻找策略。Mapper接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK
		动态代理为Mapper接口生成代理对象proxy,代理对象会拦截接口方法，转而
		执行MapperStatement所代表的sql,然后将sql执行结果返回.

	80.!!!Mybatis 是如何进行分页的？分页插件的原理是什么？
		Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页.可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页.分页插件的基本原理是使用Mybatis提供的插件接口,实现自定义插件，在插件的栏截方法内拦截方法内拦截待执行的sql,然后重写sql, 根据dialect方言，添加对应的物理分页语句和物理分页参数.

	81.!Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？ 

		第一种是使用<resultMap>标签，逐一定义数据库列名和对象属性名之间的映射关系。 第二种是使用 sql 列的别名功能，将列的别名书写为对象属性名。有了列名与属性名的映射关系后，Mybatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。 

	82.如何执行批量插入? 
		<insert id=”insertname”>
			insert into names (name) values (#{value})
		</insert> 

		list < string > names = new arraylist();
		names.add(“fred”);
		names.add(“barney”);
		names.add(“betty”);
		names.add(“wilma”);
		// 注意这里 executortype.batch
		sqlsession sqlsession =
		sqlsessionfactory.opensession(executortype.batch);
		try {
		namemapper mapper = sqlsession.getmapper(namemapper.class);
		for (string name: names) {
		mapper.insertname(name);
		}
		sqlsession.commit();
		} catch (Exception e) {
		e.printStackTrace();
		sqlSession.rollback();
		throw e;
		}
		finally {
		sqlsession.close();
		}

	83.如何获取自动生成的(主)键值?
		<insert id=”insertname” usegeneratedkeys=”true” keyproperty=”id”>
			insert into names (name) values (#{name})
		</insert>

		name name = new name();
		name.setname(“fred”);
		int rows = mapper.insertname(name);
		// 完成后,id 已经被设置到对象中
		system.out.println(“rows inserted = ” + rows);
		system.out.println(“generated key value = ” + name.getid()); 

	84.在 mapper 中如何传递多个参数? 
		1、第一种： 
			DAO 层的函数
		public UserselectUser(String name,String area);
		对应的 xml,#{0}代表接收的是 dao 层中的第一个参数，#{1}代表 dao 层中第二
		参数，更多参数一致往后加即可。 

		<select id="selectUser"resultMap="BaseResultMap">
			select * fromuser_user_t whereuser_name = #{0}
			anduser_area=#{1}
		</select> 

		2、第二种： 使用 @param 注解: 
			public interface usermapper {
				user selectuser(@param(“username”) string
				username,@param(“hashedpassword”) string hashedpassword);
			} 

		然后,就可以在 xml 像下面这样使用(推荐封装为一个 map,作为单个参数传递给mapper):

		<select id=”selectuser” resulttype=”user”>
			select id, username, hashedpassword
			from some_table
			where username = #{username}
			and hashedpassword = #{hashedpassword}
		</select> 

		3、第三种：多个参数封装成 map
		try {
			//映射文件的命名空间.SQL 片段的 ID，就可以调用对应的映射文件中的
			SQL
			//由于我们的参数超过了两个，而方法中只有一个 Object 参数收集，因此
			我们使用 Map 集合来装载我们的参数
			Map < String, Object > map = new HashMap();
			map.put("start", start);
			map.put("end", end);
			return sqlSession.selectList("StudentID.pagination", map);
			} catch (Exception e) {
			e.printStackTrace();
			sqlSession.rollback();
			throw e;
			} finally {
			MybatisUtil.closeSqlSession();
		} 

	85、Mybatis 动态 sql 有什么用？执行原理？有哪些动态 sql？ 
		Mybatis 动态 sql 可以在 Xml 映射文件内，以标签的形式编写动态 sql，
		执行原理是根据表达式的值 完成逻辑判断并动态拼接 sql 的功能。Mybatis 提供了 9 种动态 sql 标签：trim | where | set | foreach | if | choose| when | otherwise | bind。 

	86.xml 映射文件中，除了常见的 select|insert|updae|delete标签之外，还有哪些标签？
		<resultMap>、<parameterMap>、<sql>、<include>、
		<selectKey>，加上动态 sql 的 9 个标签，其中<sql>为 sql 片段标签，通过
		<include>标签引入 sql 片段，<selectKey>为不支持自增的主键生成策略标
		签。

	87.!Mybatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？ 
		不同的 Xml 映射文件，如果配置了 namespace，那么 id 可以重复；如果没有配置 namespace，那么 id 不能重复；原因就是 namespace+id 是作为 Map<String, MapperStatement>的 key使用的，如果没有 namespace，就剩下 id，那么，id 重复会导致数据互相覆盖。有了 namespace，自然 id 就可以重复，namespace 不同，namespace+id 自然也就不同。 

	88.为什么说 Mybatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？ 
		Hibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 Mybatis在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具。 

	89. 一对一、一对多的关联查询 ？ 
		<mapper namespace="com.lcb.mapping.userMapper">
		<!--association 一对一关联查询 --><select id="getClass" parameterType="int"
		resultMap="ClassesResultMap">
		select * from class c,teacher t where c.teacher_id=t.t_id and
		c.c_id=#{id}
		</select>
		<resultMap type="com.lcb.user.Classes" id="ClassesResultMap">
		<!-- 实体类的字段名和数据表的字段名映射 -->
		<id property="id" column="c_id"/>
		<result property="name" column="c_name"/>
		<association property="teacher"
		javaType="com.lcb.user.Teacher">
		<id property="id" column="t_id"/>
		<result property="name" column="t_name"/>
		</association>
		</resultMap>
		<!--collection 一对多关联查询 -->
		<select id="getClass2" parameterType="int"
		resultMap="ClassesResultMap2">
		select * from class c,teacher t,student s where c.teacher_id=t.t_id
		and c.c_id=s.class_id and c.c_id=#{id}
		</select>
		<resultMap type="com.lcb.user.Classes" id="ClassesResultMap2">
		<id property="id" column="c_id"/>
		<result property="name" column="c_name"/>
		<association property="teacher"
		javaType="com.lcb.user.Teacher">
		<id property="id" column="t_id"/><result property="name" column="t_name"/>
		</association>
		<collection property="student"
		ofType="com.lcb.user.Student">
		<id property="id" column="s_id"/>
		<result property="name" column="s_name"/>
		</collection>
		</resultMap>
		</mapper> 

	90.MyBatis 实现一对一有几种方式?具体怎么操作的？
		有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap 里面配置 association 节点配置一对一的类就可以完成； 嵌套查询是先查一个表，根据这个表里面的结果的 外键 id，去再另外一个表里面查询数据,也是通过 association 配置，但另外一个表的查询通过 select 属性配置。 



	91.MyBatis 实现一对多有几种方式,怎么操作的？ 
		有联合查询和嵌套查询。联合查询是几个表联合查询,只查询一次,通过在resultMap 里面的 collection 节点配置一对多的类就可以完成；嵌套查询是先查一个表,根据这个表里面的 结果的外键 id,去再另外一个表里面查询数据,也是通过配置 collection,但另外一个表的查询通过 select 节点配置。


	92.Mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？
		Mybatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在 Mybatis配置文件中，可以配置是否启用延迟加载 lazyLoadingEnabled=true|false。它的原理是，使用 CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 a.getB().getName()，拦截器 invoke()方法发现 a.getB()是null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getB().getName()方法的调用。这就是延迟加载的基本原理。 当然了，不光是 Mybatis，几乎所有的包括 Hibernate，支持延迟加载的原理都是一样的。


	93.Mybatis 的一级、二级缓存?
		1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。
		2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/> 
		3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。 

	94.什么是 MyBatis 的接口绑定？有哪些实现方式？ 
		接口绑定，就是在 MyBatis 中任意定义接口,然后把接口里面的方法和 SQL 语句绑定, 我们直接调用接口方法就可以,这样比起原来了 SqlSession 提供的方法我们可以有更加灵活的选择和设置。 接口绑定有两种实现方式,一种是通过注解绑定，就是在接口的方法上面加上@Select、@Update 等注解，里面包含 Sql 语句来绑定；另外一种就是通过 xml里面写 SQL 来绑定, 在这种情况下,要指定 xml 映射文件里面的 namespace 必须为接口的全路径名。当 Sql 语句比较简单时候,用注解绑定, 当 SQL 语句比较复杂时候,用 xml 绑定,一般用 xml 绑定的比较多。 


	95.使用 MyBatis 的 mapper 接口调用时有哪些要求？ 
		1、Mapper 接口方法名和 mapper.xml 中定义的每个 sql 的 id 相同；
		2、Mapper 接口方法的输入参数类型和 mapper.xml 中定义的每个 sql 的parameterType 的类型相同；
		3、Mapper 接口方法的输出参数类型和 mapper.xml 中定义的每个 sql 的resultType 的类型相同；
		4、Mapper.xml 文件中的 namespace 即是 mapper 接口的类路径。

	96.简述 Mybatis 的插件运行原理，以及如何编写一个插件?
		Mybatis 仅可以编写针对 ParameterHandler、ResultSetHandler、StatementHandler、Executor 这 4 种接口的插件，Mybatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke()方法，当然，只会拦截那些你指定需要拦截的方法。 编写插件：实现 Mybatis 的 Interceptor 接口并复写 intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。