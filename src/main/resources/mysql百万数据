索引：
索引算法种类
B-tree索引（重点掌握，之后文章详细讲解）
Hash索引
full-text索引
R-tree索引
索引的优势

类似大学图书馆书目索引，提高数据检索效率，降低数据库IO成本

通过索引列对数据进行排序，降低数据排序成本，降低了CPU消耗

索引的劣势

实际上索引也是一张表，该表保存了主键和索引字段，并指向实体表的记录,所以索引列也是要占用空间的

虽然索引大大提高了查询速度，同时却会降低更新表的速度,如果对表INSERT,UPDATE和DELETE。因为更新表时，MySQL不仅要不存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息

索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立优秀的索引，或优化查询语句


索引分类

单值索引：即一个索引只包含单个列，一个表可以有多个单列索引

唯一索引：索引列的值必须唯一，但允许有空值

复合索引：即一个索引包含多个列

哪些情况需要建索引

主键自动建立唯一索引

频繁作为查询的条件的字段应该创建索引

查询中与其他表关联的字段，外键关系建立索引

频繁更新的字段不适合创建索引：因为每次更新不单单是更新了记录还会更新索引，加重IO负担

Where条件里用不到的字段不创建索引

单间/组合索引的选择问题（在高并发下倾向创建组合索引）

查询中排序的字段，若通过索引去访问将大大提高排序的速度

查询中统计或者分组字段









1.全部用到索引（如果建立复合索引包含了几个字段，查询的时候最好全部用到，而且严格按照索引的顺序）
2.最左前缀法则（如果建立的是复合索引，索引的顺序要按照建立时的顺序，即从左到右，如：a->b->c(和B+树的数据结构有关)）
3.不要掉索引做以下处理
计算，如：+、-、*、/、!=、<>、is null、is not null、or
函数，如：sum()、round()等等
手动/自动类型转换，如：id = "1"，本来是数字，给写成字符串了
4.索引不要放在范围查询右边（比如复合索引：a->b->c，当 where a="" and b>10 and 3=""，这时候只能用到 a 和 b，c 用不到索引，因为在范围之后索引都失效（和 B+树结构有关））
5.减少 select * 的使用 （select 查询字段和 where 中使用的索引字段一致。使用覆盖索引）
6.like 模糊搜索
失效情况
like "%张三%"
like "%张三"

解决方案
使用复合索引，即 like 字段是 select 的查询字段，如：select name from table where name like "%张三%"
使用 like "张三%"
7.当查询语句中使用 order by 进行排序时，如果没有使用索引进行排序，会出现 filesort 文件内排序，这种情况在数据量大或者并发高的时候，会有性能问题，需要优化。
